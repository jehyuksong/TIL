### 오늘 한 일🔥

- HTML, CSS는 이전에 굉장히 허접한😅  페이지를 만들어 보면서 조금 공부해봤기 때문에 본격적으로 개발자로서 공부를 시작한 오늘은 html과 css를 한번 대충 훑으려고 한다.
- Udemy의 colt steele - web developer bootcamp 강좌를 결제해서 봤는데 영어가 유창하지 않은 나로서는 의미를 오히려 잘못 받아들일 수 있다는 점에서 꽤나 어려운 것 같다. 그래서 우선 내가 어느정도 가려서 들을 수준이 되기 전까지는 한국 강좌를 듣고자 한다.
- 오늘은 인프런의 윤지수 강사님께서 해주신 HTML,CSS 개발을 위한 핵심 가이드를 보면서 다시 한번 익혔다.

# 웹사이트 작동원리

1. '[www.youtube.com](http://www.youtube.com)' 이라는 도메인을 검색하고 '엔터'를 누르면 HTTP 요청을 하게된다.
2. HTTP 요청이 발생하면 특정 정보가 담긴 패킷이라고 불리는 가상봉투에 넣고 이 패킷을 집 밖으로 보내 주요 인터넷 허브로 전송된다. 그러면 그 인터넷 허브에서 다시 일련의 지역 네트워크를 통해 패킷을 전송한다.
3. 그러면 서버는 요청을 읽고 우리가 요청하는 웹페이지를 보낼 준비를 한다.
4. 그러나 웹 페이지는 이미지로 구성되어 있으며 정보가 너무 커서 단일 데이터 패킷으로는 보낼 수 없다.

    마치 교통체증이 있을 때 지하철과 다른 방법으로 길을 찾아가듯 이 웹페이지는 수천 개의 작은 패킷의 데이터로 분쇄되어 허브를 통해 교통 정보를 확인한 후 가능한 한 빨리 도착할 수 있게 다른 허브를 통해 체크인된다.

5. 그런 다음 모든 지역의 네트워크를 통과하는 구리선을 통해 모든 패킷이 목적지에 도달하고 웹페이지가 화면에 뜨게 된다. 

**우리는 이것을 인터넷이라고 부르고 로딩되는 페이지의 뒤에서 일어나는 장면들이다.**

**사이트 이용자의 입장이 아닌 개발자의 입장에서 누군가가 웹 페이지를 요청할 때 어떤 내용을 다시 보내줘야하는가에 대해 설정하는 것은 전적으로 나의 몫이다.**

# 프론트엔드와 백엔드

http://www.redrobotsystems.co.uk/front-end-middleware-back-end/

- **프론트엔드와 백엔드에 대해서 가장 잘 보여줄 수 있는 사진이다.**
- 사용자들이 보고 있는 화면을 구성하는 것은 프론트엔드 부분이지만, 결국 그 프론트엔드가 보여지기까지는 수 많은 백엔드가 존재한다.
- 마치 수면 위로 올라온 빙산을 보고 그게 전부라고 생각하면 안되는 것이다. 수면 위로 올라와있는 빙산이 '프론트엔드' 라면 수면 아래로 가라앉아있는 빙산이 '백엔드' 라고 볼 수 있다.

> 레스토랑에 갔다고 생각해보자. 우리는 주문을 할 것이고 '주방' 이라는 백엔드에서 우리가 원하는 음식을 만들어서 '식탁' 이라는 프론트엔드로 가져다놓는다. 물론 이런 과정이 필수적인 것은 아니다.

**정적 웹페이지가 있고 동적 웹페이지가 있는데 동적 웹페이지는 백엔드에서 서버 측 코드의 일부를 기반으로 변경되지만 정적 웹페이지는 그렇지 않기 때문이다.**

# HTML

- HTML (HyperText Markup Language)은 웹을 이루는 가장 기초적인 구성 요소입니다. HTML은 웹 콘텐츠의 의미와 구조를 정의할 때 사용합니다.

### HTML 역사

- 1980년대 후반에 인터넷 통신을 통한 전달이 일반텍스트로 제한되었다. 이를 해결하기 위해서 HTML이 개발되었고, 브라우저에서 볼 수 있는 컨텐츠 모델을 사용하여 컨텐츠에 대한 액세스를 단순화하고 풍부한 컨텐츠를 사용할 수 있게 되었다.

### HTML 태그

- HTML에서 태그들은 단순히 다르게 보이고 표현되는 것이 아니라, 의미를 가지기 때문에 정확하게 잘 사용하는 것이 중요하다.

### HTML 자주 쓰는 태그

- <a> 하이퍼링크
- <div> 특정 영역을 정의
- <ul> 순서가 없는 목록
- <p> 문단을 정의
- <h1> ~ <h6> 구획 제목을 나타냄, 중요도 h1 > h6
- <br> 줄바꿈
- <span> 구문을 위한 인라인 컨테이너

### HTML 레이아웃 태그

https://andamiro25.tistory.com/140

- 전체 웹페이지의 구성에 따라서 여러가지의 태그가 사용된다.

### ID 와 CLASS

- CLASS는 여러개에 사용가능하지만, ID는 중복없이 하나에만 사용을 해야한다.
- 클래스와 아이디는 알아보기 쉽게 사용 목적에 따라서 이름을 지어주는 것이 중요하다.

### ELEMENTS

- 구글 크롬에서 페이지 우클릭 검사를 눌러서 Elements 탭을 들어가서 페이지가 어떻게 구성되어 있는지 볼 수 있다. class name을 어떻게 짓는지 전체적인 레이아웃은 어떻게 하는지 등을 직접 보고 수정까지 하면서 공부할 수 있다. 잘만들었다고 생각되는 웹사이트를 보면서 공부하자😄

### HTML 팁😍

- <div>를 너무 남용하지 않기 위해서 팀원들끼리의 대화가 중요하다.
- 모든 태그를 암기할 필요는 없다. 어차피 나중에 토이프로젝트를 하면서 필요한 것들을 찾아보고, 사용하게 되면서 알아서 외워지고, 익힐 수 있다.
- 잘 만든 웹페이지를 보면서 공부를 많이 하면 공부에 큰 도움이 된다.

# CSS

- CSS (Cascading Style Sheets)는 HTML로 작성된 문서의 표현을 기술하기 위해 쓰이는 스타일시트 언어입니다.

```css
span { 
	color : red;
}
```

- 이와 같이 selector, property, value 의 순서로 작성합니다.

### CSS 기술 방법

1. inline
- 사용할 태그 안에다가 직접 작성해서 기술

 

 2.  internal

- <head> 안에 <style>을 작성해서 기술

 3.  external

- 외부파일(.css)에 작성해서 관리

⇒ 섞어서 사용할 경우에 inline, internal, external 순으로 중요도가 적용된다.

### CSS 상속개념

- body에 css를 적용시키면 그 아래 전부 적용이 되고 body div 에 적용시키면 body 안에 있는 모든 div에 적용이 된다. 이런 상속개념을 주의하고 가장 적합하게 사용하고 코드의 길이도 줄일 수 있을 것 같다.
- padding과 border 같은 배치와 관련된 요소들은 상속을 받지 않는다.

### CSS Cascading

- 선언방식에 따른 차이 (Inline > internal > external)
- 동일한 것에 적용했을 경우 (나중에 적힌 것이 적용됨)
- 구체적으로 표현된 것에 적용 (span 보다 body span이라고 적힌 것이 적용됨)
- 같은 것을 가리치더라도 class보다 id 값의 우선순위가 높음 ( id > class > element)

### CSS Selector

- tag로 지정 (span, div 등)
- id로 지정
- class로 지정
- 섞어서도 사용가능
- 그룹으로 지정 (쉼표로 그룹묶음)
- 자식요소는 공백으로 표현가능

### CSS Color

- rgb
- hex
- color name

### CSS Font

- px
- em (2em이면 기준 픽셀값을 2배했다는 뜻, 기준 픽셀값은 상속된 값의 픽셀을 의미, 상속받은 픽셀값이 없으면 기준픽셀은 16px)

### CSS Box model

- padding, margin 값의 4방향 값을 다르게 할때는 위,오른쪽,아래,왼쪽 순으로 적으면 된다.
- padding, margin의 값을 10px 15px; 로 지정할 경우 top,bottom은 10px / right,left는 15px이 된다.
- 아래만 주고 싶을 때는 padding-bottom, 위는 padding-top 등 사용가능하다.
- 인접한 두 개의 block element가 서로 다른 margin을 가지고 있으면 큰 값을 가진 margin값이 공유됨

 →10px + 20px = 20px

- 인접한 두개의 inline element의 margin은 각각의 margin의 합으로 표현됨

 → 10px + 20px = 30px

- [https://css-tricks.com/the-css-box-model/](https://css-tricks.com/the-css-box-model/)

### CSS Layout

- position 의 값은 static이 기본값
- relative는 현재 위치에서 상대적으로 움직임
- absolute는 내 앞에, 위에 다른 박스,컨테이너가 있던 말던 상관없이 static이 아닌 다른것을 기준으로 값만큼 움직임 (부모 중에서 static이 아닌 다른 포지션이 설정된 값을 기준으로 움직임)
- fixed는 absolute와 비슷하지만 스크롤이 생겨도 움직이지 않는다.
- [https://css-tricks.com/almanac/properties/p/position/](https://css-tricks.com/almanac/properties/p/position/)

### CSS Float

```css
div{
	float:left;
}
```

- float: left로 설정할 경우 왼쪽을 기준으로 배치된다.
- float를 줬을 때 상위 개념에 overflow : auto 혹은 hidden으로 적용하면 자식으로 인식을 해서 오류나는 것을 막을 수 있다.
- 하단에서 clear : left 와 같은 방법으로 위의 float을 인식할 수 있다.
- [https://css-tricks.com/all-about-floats/](https://css-tricks.com/all-about-floats/)

### CSS Flex

- 반응형 웹을 구현할 때 배치에 큰 도움을 준다.
- [https://css-tricks.com/snippets/css/a-guide-to-flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)

### CSS Z-index (Stacking context)

- 기본적으로는 마지막에 나온 것이 가장 위로 올라온다.
- z-index 기본 값은 0이므로 1로 하면 가장 위로 올라오고 -1로 하면 가장 아래로 내려간다.
- static이 아닌 것들이 겹쳤을 때 적절하게 사용할 수 있다.
- 숫자가 상대적으로 큰 것들이 더 위로 올라가는 원리이다.
- 숫자가 아무리 커도 부모의 z-index 값이 더 낮으면 위로 올라갈 수 없다.

### LESS

- CSS에서 여러가지로 중복되어 적용이 되고 수정할 때 찾기도 힘들고 등등 이외에도 여러가지 문제점이 발생한다.  그럴 때의 경우를 해결하기 위해서 CSS가 아닌 프로그래밍적인 LESS,SASS 등  여러가지가 존재함. 이런 것들을 CSS preprocessor 라고 한다.
- 픽셀값 대신해서 @base_width : 300px; 와 같은 변수를 만들어서 사용할 수 있다. @base_width / 2 와 같은 값으로 나누기 2를 해줄 수도 있다.
- 또한 어떠한 특정 div의 값을 그대로 사용하고 싶을 경우에 그대로 다른 요소에 div;값을 넣어주면 동일한 값이 적용된다.

```css
content{
	width:300px;
	li{
		color:red;
		a{
			border: blue;
		}
	}
}
```

- 또한, .content 안에 li 안에 a가 있는 경우와 같이 사용 가능하다.
- LESS는 브라우저에서 해석되지 않기 때문에 따로 CSS로 컴파일하는 과정이 필요하다.

  → [http://lesscss.org/usage/](http://lesscss.org/usage/) 

### CSS Transition / Transform

- 자바스크립트로도 다 구현가능하지만, css로 하는 것이 가장 빠르기 때문에 간단한 것은 css에서 하는 것이 좋다.
- [https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions](https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions)
- [https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Transforms/Using_CSS_transforms](https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Transforms/Using_CSS_transforms)
